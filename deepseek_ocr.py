# -*- coding: utf-8 -*-
"""Deepseek OCR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16NXW_E5TJAjS_eoJshHYw04SwWhgEsnV
"""

!pip install -q torch==2.6.0 torchvision==0.18.1 torchaudio==2.6.0 --force-reinstall
!pip install -q transformers==4.46.3 tokenizers==0.20.3 einops addict easydict
!pip install -q flash-attn==2.7.3 --no-build-isolation
!pip install -q accelerate safetensors pillow
!pip install agno

import torch
from transformers import AutoModel, AutoTokenizer
import os
os.environ["CUDA_VISIBLE_DEVICES"] = '0'
model_name = 'deepseek-ai/DeepSeek-OCR'

tokenizer = AutoTokenizer.from_pretrained(model_name,

                                          trust_remote_code=True)
model = AutoModel.from_pretrained(
    model_name,
    trust_remote_code=True,
    use_safetensors=True,
    torch_dtype=torch.bfloat16
)

model = model.eval().cuda()

prompt = "<image>\n<|grounding|>Convert the document to markdown. "
image_file = '/content/cv.jpg'
output_path = '/content/'


# Smaller inference settings
res = model.infer(
    tokenizer,
    prompt=prompt,
    image_file=image_file,
    output_path=output_path,
    base_size=1024,        # smaller than default
    image_size= 640,       # smaller than default
    crop_mode=True,      # disables memory-heavy crop
    save_results=True,
    test_compress=True
)

with open("result.mmd", "r", encoding="utf-8") as f:
    ocr_text = f.read()

print(ocr_text[:50])

from agno.agent import Agent, RunOutput  # noqa
from agno.models.google import Gemini
import json

os.environ["GOOGLE_API_KEY"]="AIzaSyD8*****************************"

agent = Agent(name ="resumeextration", instructions = " Extract information from the resume text and return it in a structered json",model=Gemini(id="gemini-2.0-flash-exp"), markdown=True)


# Create the prompt for the agent with detailed instructions
parse_prompt = f"""
You are an expert resume parser. Extract the following information from the resume text below and return it as a JSON object.

RESUME TEXT:
{ocr_text}

INSTRUCTIONS:
Extract these fields:
1. name - Full name of the candidate (string)
2. email - Email address (string)
3. skills - List of technical and soft skills (array of strings)
4. education - Educational qualifications (array of objects with: degree, institution, gpa_percentage, year)
   - Specifically extract 10th, 12th, and college GPA/percentages
5. experience - Work experiences (array of objects with: company, position, duration, description)
   - If no experience, return empty array

IMPORTANT:
- Return ONLY a valid JSON object
- No markdown formatting, no code blocks, no explanations
- If a field is not found, use null for strings or [] for arrays
- Ensure all GPA and percentage values are captured

JSON FORMAT:
{{
  "name": "string",
  "email": "string",
  "skills": ["skill1", "skill2", ...],
  "education": [
    {{
      "degree": "string",
      "institution": "string",
      "gpa_percentage": "string",
      "year": "string"
    }}
  ],
  "experience": [
    {{
      "company": "string",
      "position": "string",
      "duration": "string",
      "description": "string"
    }}
  ]
}}
"""

response = agent.run(parse_prompt)

print(response.content)